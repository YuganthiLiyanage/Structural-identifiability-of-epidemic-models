%%%%%%%%%%%%%%%%%%%%
Since N is known, we add N as another observation (y2) to the model, and perform the structural identifiability.

%%%%%%%%%%%%Model%%%%%%%%%%%%%

julia> ode = @ODEmodel(
       S'(t) = -S(t)*(betai*I(t)+betau*U(t))/N,
       E'(t) = -(k*rho+k*(1-rho))*E(t)+S(t)*(betai*I(t)+betau*U(t))/N,
       I'(t) =k*rho*E(t)-gamma*I(t),
       U'(t)=k*(1-rho)*E(t)-gamma*U(t),
       R'(t)=gamma*I(t)+gamma*U(t),
       y1(t)=k*rho*E(t),
       y2(t)=N
       )

[ Info: Summary of the model:
[ Info: State variables: S, E, I, U, R
[ Info: Parameters: N, betai, betau, gamma, k, rho
[ Info: Inputs:
[ Info: Outputs: y1, y2
S'(t) = (-S(t)*I(t)*betai - S(t)*U(t)*betau)//N
E'(t) = (S(t)*I(t)*betai + S(t)*U(t)*betau - E(t)*N*k)//N
I'(t) = E(t)*k*rho - I(t)*gamma
U'(t) = -E(t)*k*rho + E(t)*k - U(t)*gamma
R'(t) = I(t)*gamma + U(t)*gamma
y1(t) = E(t)*k*rho
y2(t) = N


%%%%%%%%%%%%%%Global Identifiability Results%%%%%%%%%%%%%%%

julia> assess_identifiability(ode)

  S(t)  => :nonidentifiable
  E(t)  => :nonidentifiable
  I(t)  => :nonidentifiable
  U(t)  => :nonidentifiable
  R(t)  => :nonidentifiable
  N     => :globally
  betai => :nonidentifiable
  betau => :nonidentifiable
  gamma => :globally
  k     => :globally
  rho   => :nonidentifiable


%%%%%%%%%%%%%%%Identifiable parameter correlations%%%%%%%%%%%%%%

julia> find_identifiable_functions(ode)
 

 k
 gamma
 N
 (betai*rho - betau*rho + betau)//rho


%%%%%%%%%%%%%%%Identifiable functions in parameters and states%%%%%%%%%%%%%%%%%

julia> find_identifiable_functions(ode,with_states=true)

 k
 gamma
 N
 E(t)*rho
 S(t)*rho
 I(t)*betai + U(t)*betau
 (betai*rho - betau*rho + betau)//rho


%%%%%%%%%%%%%%%Input-output equations%%%%%%%%%%%%%%%%%%%%

julia> ioeqs = find_ioequations(ode)
julia> collect(values(ioeqs))

 N^2*gamma^3*k^2*rho^2*y1(t)_0^3*y1(t)_2 - N^2*gamma^3*k^2*rho^2*y1(t)_0^2*y1(t)_1^2 + 2*N^2*gamma^3*k*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 2*N^2*gamma^3*k*rho^2*y1(t)_0*y1(t)_1^3 + N^2*gamma^3*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - N^2*gamma^3*rho^2*y1(t)_1^4 + N^2*gamma^2*k^3*rho^2*y1(t)_0^3*y1(t)_2 - N^2*gamma^2*k^3*rho^2*y1(t)_0^2*y1(t)_1^2 + N^2*gamma^2*k^2*rho^2*y1(t)_0^3*y1(t)_3 + 2*N^2*gamma^2*k^2*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 3*N^2*gamma^2*k^2*rho^2*y1(t)_0*y1(t)_1^3 + 2*N^2*gamma^2*k*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + N^2*gamma^2*k*rho^2*y1(t)_0^2*y1(t)_2^2 - N^2*gamma^2*k*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - 2*N^2*gamma^2*k*rho^2*y1(t)_1^4 + N^2*gamma^2*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_3 + N^2*gamma^2*rho^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - 2*N^2*gamma^2*rho^2*y1(t)_1^3*y1(t)_2 + N^2*gamma*k^3*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - N^2*gamma*k^3*rho^2*y1(t)_0*y1(t)_1^3 + N^2*gamma*k^2*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + 2*N^2*gamma*k^2*rho^2*y1(t)_0^2*y1(t)_2^2 - 3*N^2*gamma*k^2*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + 2*N^2*gamma*k*rho^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - N^2*gamma*k*rho^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - N^2*gamma*k*rho^2*y1(t)_1^3*y1(t)_2 + 2*N^2*gamma*rho^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - N^2*gamma*rho^2*y1(t)_0*y1(t)_2^3 - N^2*gamma*rho^2*y1(t)_1^3*y1(t)_3 + N^2*k^3*rho^2*y1(t)_0^2*y1(t)_2^2 - 2*N^2*k^3*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + N^2*k^3*rho^2*y1(t)_1^4 + 2*N^2*k^2*rho^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - 2*N^2*k^2*rho^2*y1(t)_0*y1(t)_1^2*y1(t)_3 - 2*N^2*k^2*rho^2*y1(t)_0*y1(t)_1*y1(t)_2^2 + 2*N^2*k^2*rho^2*y1(t)_1^3*y1(t)_2 + N^2*k*rho^2*y1(t)_0^2*y1(t)_3^2 - N^2*k*rho^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - N^2*k*rho^2*y1(t)_0*y1(t)_2^3 - N^2*k*rho^2*y1(t)_1^3*y1(t)_3 + 2*N^2*k*rho^2*y1(t)_1^2*y1(t)_2^2 + N^2*rho^2*y1(t)_0*y1(t)_1*y1(t)_3^2 - N^2*rho^2*y1(t)_0*y1(t)_2^2*y1(t)_3 - N^2*rho^2*y1(t)_1^2*y1(t)_2*y1(t)_3 + N^2*rho^2*y1(t)_1*y1(t)_2^3 + N*betai*gamma^2*k^3*rho^2*y1(t)_0^5 + 3*N*betai*gamma^2*k^2*rho^2*y1(t)_0^4*y1(t)_1 + 3*N*betai*gamma^2*k*rho^2*y1(t)_0^3*y1(t)_1^2 + N*betai*gamma^2*rho^2*y1(t)_0^2*y1(t)_1^3 + 2*N*betai*gamma*k^3*rho^2*y1(t)_0^4*y1(t)_1 + 6*N*betai*gamma*k^2*rho^2*y1(t)_0^4*y1(t)_2 + 12*N*betai*gamma*k*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*N*betai*gamma*k*rho^2*y1(t)_0^2*y1(t)_1^3 + 6*N*betai*gamma*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 4*N*betai*gamma*rho^2*y1(t)_0*y1(t)_1^4 + 4*N*betai*k^3*rho^2*y1(t)_0^4*y1(t)_2 - 4*N*betai*k^3*rho^2*y1(t)_0^3*y1(t)_1^2 + 4*N*betai*k^2*rho^2*y1(t)_0^4*y1(t)_3 + 2*N*betai*k^2*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*N*betai*k^2*rho^2*y1(t)_0^2*y1(t)_1^3 + 8*N*betai*k*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_3 - 3*N*betai*k*rho^2*y1(t)_0^3*y1(t)_2^2 - 2*N*betai*k*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 3*N*betai*k*rho^2*y1(t)_0*y1(t)_1^4 + 4*N*betai*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_3 - 3*N*betai*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_2^2 - N*betai*rho^2*y1(t)_1^5 - N*betau*gamma^2*k^3*rho^2*y1(t)_0^5 + N*betau*gamma^2*k^3*rho*y1(t)_0^5 - 3*N*betau*gamma^2*k^2*rho^2*y1(t)_0^4*y1(t)_1 + 3*N*betau*gamma^2*k^2*rho*y1(t)_0^4*y1(t)_1 - 3*N*betau*gamma^2*k*rho^2*y1(t)_0^3*y1(t)_1^2 + 3*N*betau*gamma^2*k*rho*y1(t)_0^3*y1(t)_1^2 - N*betau*gamma^2*rho^2*y1(t)_0^2*y1(t)_1^3 + N*betau*gamma^2*rho*y1(t)_0^2*y1(t)_1^3 - 2*N*betau*gamma*k^3*rho^2*y1(t)_0^4*y1(t)_1 + 2*N*betau*gamma*k^3*rho*y1(t)_0^4*y1(t)_1 - 6*N*betau*gamma*k^2*rho^2*y1(t)_0^4*y1(t)_2 + 6*N*betau*gamma*k^2*rho*y1(t)_0^4*y1(t)_2 - 12*N*betau*gamma*k*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_2 + 6*N*betau*gamma*k*rho^2*y1(t)_0^2*y1(t)_1^3 + 12*N*betau*gamma*k*rho*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*N*betau*gamma*k*rho*y1(t)_0^2*y1(t)_1^3 - 6*N*betau*gamma*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_2 + 4*N*betau*gamma*rho^2*y1(t)_0*y1(t)_1^4 + 6*N*betau*gamma*rho*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 4*N*betau*gamma*rho*y1(t)_0*y1(t)_1^4 - 4*N*betau*k^3*rho^2*y1(t)_0^4*y1(t)_2 + 4*N*betau*k^3*rho^2*y1(t)_0^3*y1(t)_1^2 + 4*N*betau*k^3*rho*y1(t)_0^4*y1(t)_2 - 4*N*betau*k^3*rho*y1(t)_0^3*y1(t)_1^2 - 4*N*betau*k^2*rho^2*y1(t)_0^4*y1(t)_3 - 2*N*betau*k^2*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_2 + 6*N*betau*k^2*rho^2*y1(t)_0^2*y1(t)_1^3 + 4*N*betau*k^2*rho*y1(t)_0^4*y1(t)_3 + 2*N*betau*k^2*rho*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*N*betau*k^2*rho*y1(t)_0^2*y1(t)_1^3 - 8*N*betau*k*rho^2*y1(t)_0^3*y1(t)_1*y1(t)_3 + 3*N*betau*k*rho^2*y1(t)_0^3*y1(t)_2^2 + 2*N*betau*k*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_2 + 3*N*betau*k*rho^2*y1(t)_0*y1(t)_1^4 + 8*N*betau*k*rho*y1(t)_0^3*y1(t)_1*y1(t)_3 - 3*N*betau*k*rho*y1(t)_0^3*y1(t)_2^2 - 2*N*betau*k*rho*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 3*N*betau*k*rho*y1(t)_0*y1(t)_1^4 - 4*N*betau*rho^2*y1(t)_0^2*y1(t)_1^2*y1(t)_3 + 3*N*betau*rho^2*y1(t)_0^2*y1(t)_1*y1(t)_2^2 + N*betau*rho^2*y1(t)_1^5 + 4*N*betau*rho*y1(t)_0^2*y1(t)_1^2*y1(t)_3 - 3*N*betau*rho*y1(t)_0^2*y1(t)_1*y1(t)_2^2 - N*betau*rho*y1(t)_1^5 + 4*betai^2*k^3*rho^2*y1(t)_0^6 + 12*betai^2*k^2*rho^2*y1(t)_0^5*y1(t)_1 + 12*betai^2*k*rho^2*y1(t)_0^4*y1(t)_1^2 + 4*betai^2*rho^2*y1(t)_0^3*y1(t)_1^3 - 8*betai*betau*k^3*rho^2*y1(t)_0^6 + 8*betai*betau*k^3*rho*y1(t)_0^6 - 24*betai*betau*k^2*rho^2*y1(t)_0^5*y1(t)_1 + 24*betai*betau*k^2*rho*y1(t)_0^5*y1(t)_1 - 24*betai*betau*k*rho^2*y1(t)_0^4*y1(t)_1^2 + 24*betai*betau*k*rho*y1(t)_0^4*y1(t)_1^2 - 8*betai*betau*rho^2*y1(t)_0^3*y1(t)_1^3 + 8*betai*betau*rho*y1(t)_0^3*y1(t)_1^3 + 4*betau^2*k^3*rho^2*y1(t)_0^6 - 8*betau^2*k^3*rho*y1(t)_0^6 + 4*betau^2*k^3*y1(t)_0^6 + 12*betau^2*k^2*rho^2*y1(t)_0^5*y1(t)_1 - 24*betau^2*k^2*rho*y1(t)_0^5*y1(t)_1 + 12*betau^2*k^2*y1(t)_0^5*y1(t)_1 + 12*betau^2*k*rho^2*y1(t)_0^4*y1(t)_1^2 - 24*betau^2*k*rho*y1(t)_0^4*y1(t)_1^2 + 12*betau^2*k*y1(t)_0^4*y1(t)_1^2 + 4*betau^2*rho^2*y1(t)_0^3*y1(t)_1^3 - 8*betau^2*rho*y1(t)_0^3*y1(t)_1^3 + 4*betau^2*y1(t)_0^3*y1(t)_1^3
 -N + y2(t)_0


%%%%%%%%%Identifiability with known initial conditions%%%%%%%%%%%%%%%%%

assess_identifiability(ode, known_ic = [S,E,I,U,R])

 S(0)  => :globally
  E(0)  => :globally
  I(0)  => :globally
  U(0)  => :globally
  R(0)  => :globally
  N     => :globally
  betai => :globally
  betau => :globally
  gamma => :globally
  k     => :globally
  rho   => :globally

