
julia> using StructuralIdentifiability

julia> ode = @ODEmodel(
              S'(t) = -beta*S(t)*I(t)/n,
              E'(t) = beta*S(t)*I(t)/n- k*E(t),
              I'(t) =  k*rho*E(t) - gamma*I(t),
              A'(t) = k*(1-rho)*E(t) - gamma*A(t),
              R'(t) = gamma*I(t) + gamma*A(t),
              y1(t) = k*rho*E(t)
              )

[ Info: Summary of the model:
[ Info: State variables: S, E, I, A, R
[ Info: Parameters: beta, gamma, k, n, rho
[ Info: Inputs:
[ Info: Outputs: y1
S'(t) = (-S(t)*I(t)*beta)//n
E'(t) = (S(t)*I(t)*beta - E(t)*k*n)//n
I'(t) = E(t)*k*rho - I(t)*gamma
A'(t) = -E(t)*k*rho + E(t)*k - A(t)*gamma
R'(t) = I(t)*gamma + A(t)*gamma
y1(t) = E(t)*k*rho


julia>  assess_identifiability(ode)
  S(t)  => :nonidentifiable
  E(t)  => :nonidentifiable
  I(t)  => :globally
  A(t)  => :nonidentifiable
  R(t)  => :nonidentifiable
  beta  => :nonidentifiable
  gamma => :globally
  k     => :globally
  n     => :nonidentifiable
  rho   => :nonidentifiable

julia> find_identifiable_functions(ode)
 k
 gamma
 n//beta

julia> ioeqs = find_ioequations(ode)
Dict{Nemo.QQMPolyRingElem, Nemo.QQMPolyRingElem} with 1 entry:
  y1(t)_3 => 4*beta^2*k^3*y1(t)_0^6 + 12*beta^2*k^2*y1(t)_0^5*y1(t)_1 + 12*beta^2*k*y1(t)_0^4*y1(t)_1^2 + 4*beta^2*y1(tâ€¦
julia> collect(values(ioeqs))
1-element Vector{Nemo.QQMPolyRingElem}:
 4*beta^2*k^3*y1(t)_0^6 + 12*beta^2*k^2*y1(t)_0^5*y1(t)_1 + 12*beta^2*k*y1(t)_0^4*y1(t)_1^2 + 4*beta^2*y1(t)_0^3*y1(t)_1^3 + beta*gamma^2*k^3*n*y1(t)_0^5 + 3*beta*gamma^2*k^2*n*y1(t)_0^4*y1(t)_1 + 3*beta*gamma^2*k*n*y1(t)_0^3*y1(t)_1^2 + beta*gamma^2*n*y1(t)_0^2*y1(t)_1^3 + 2*beta*gamma*k^3*n*y1(t)_0^4*y1(t)_1 + 6*beta*gamma*k^2*n*y1(t)_0^4*y1(t)_2 + 12*beta*gamma*k*n*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*beta*gamma*k*n*y1(t)_0^2*y1(t)_1^3 + 6*beta*gamma*n*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 4*beta*gamma*n*y1(t)_0*y1(t)_1^4 + 4*beta*k^3*n*y1(t)_0^4*y1(t)_2 - 4*beta*k^3*n*y1(t)_0^3*y1(t)_1^2 + 4*beta*k^2*n*y1(t)_0^4*y1(t)_3 + 2*beta*k^2*n*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*beta*k^2*n*y1(t)_0^2*y1(t)_1^3 + 8*beta*k*n*y1(t)_0^3*y1(t)_1*y1(t)_3 - 3*beta*k*n*y1(t)_0^3*y1(t)_2^2 - 2*beta*k*n*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 3*beta*k*n*y1(t)_0*y1(t)_1^4 + 4*beta*n*y1(t)_0^2*y1(t)_1^2*y1(t)_3 - 3*beta*n*y1(t)_0^2*y1(t)_1*y1(t)_2^2 - beta*n*y1(t)_1^5 + gamma^3*k^2*n^2*y1(t)_0^3*y1(t)_2 - gamma^3*k^2*n^2*y1(t)_0^2*y1(t)_1^2 + 2*gamma^3*k*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 2*gamma^3*k*n^2*y1(t)_0*y1(t)_1^3 + gamma^3*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - gamma^3*n^2*y1(t)_1^4 + gamma^2*k^3*n^2*y1(t)_0^3*y1(t)_2 - gamma^2*k^3*n^2*y1(t)_0^2*y1(t)_1^2 + gamma^2*k^2*n^2*y1(t)_0^3*y1(t)_3 + 2*gamma^2*k^2*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 3*gamma^2*k^2*n^2*y1(t)_0*y1(t)_1^3 + 2*gamma^2*k*n^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + gamma^2*k*n^2*y1(t)_0^2*y1(t)_2^2 - gamma^2*k*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - 2*gamma^2*k*n^2*y1(t)_1^4 + gamma^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_3 + gamma^2*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - 2*gamma^2*n^2*y1(t)_1^3*y1(t)_2 + gamma*k^3*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - gamma*k^3*n^2*y1(t)_0*y1(t)_1^3 + gamma*k^2*n^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + 2*gamma*k^2*n^2*y1(t)_0^2*y1(t)_2^2 - 3*gamma*k^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + 2*gamma*k*n^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - gamma*k*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - gamma*k*n^2*y1(t)_1^3*y1(t)_2 + 2*gamma*n^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - gamma*n^2*y1(t)_0*y1(t)_2^3 - gamma*n^2*y1(t)_1^3*y1(t)_3 + k^3*n^2*y1(t)_0^2*y1(t)_2^2 - 2*k^3*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + k^3*n^2*y1(t)_1^4 + 2*k^2*n^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - 2*k^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_3 - 2*k^2*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 + 2*k^2*n^2*y1(t)_1^3*y1(t)_2 + k*n^2*y1(t)_0^2*y1(t)_3^2 - k*n^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - k*n^2*y1(t)_0*y1(t)_2^3 - k*n^2*y1(t)_1^3*y1(t)_3 + 2*k*n^2*y1(t)_1^2*y1(t)_2^2 + n^2*y1(t)_0*y1(t)_1*y1(t)_3^2 - n^2*y1(t)_0*y1(t)_2^2*y1(t)_3 - n^2*y1(t)_1^2*y1(t)_2*y1(t)_3 + n^2*y1(t)_1*y1(t)_2^3

julia> assess_identifiability(ode, known_ic = [S,E,I,A,R])
  S(0)  => :globally
  E(0)  => :globally
  I(0)  => :globally
  A(0)  => :globally
  R(0)  => :globally
  beta  => :nonidentifiable
  gamma => :globally
  k     => :globally
  n     => :nonidentifiable
  rho   => :globally

julia> ode = @ODEmodel(
              S'(t) = -beta*S(t)*I(t)/n,
              E'(t) = beta*S(t)*I(t)/n- k*E(t),
              I'(t) =  k*rho*E(t) - gamma*I(t),
              A'(t) = k*(1-rho)*E(t) - gamma*A(t),
              R'(t) = gamma*I(t) + gamma*A(t),
              y1(t) = k*rho*E(t),
              y2(t) = n
              )
[ Info: Summary of the model:
[ Info: State variables: S, E, I, A, R
[ Info: Parameters: beta, gamma, k, n, rho
[ Info: Inputs:
[ Info: Outputs: y1, y2
S'(t) = (-S(t)*I(t)*beta)//n
E'(t) = (S(t)*I(t)*beta - E(t)*k*n)//n
I'(t) = E(t)*k*rho - I(t)*gamma
A'(t) = -E(t)*k*rho + E(t)*k - A(t)*gamma
R'(t) = I(t)*gamma + A(t)*gamma
y1(t) = E(t)*k*rho
y2(t) = n




julia> assess_identifiability(ode, known_ic = [S,E,I,A,R])
  S(0)  => :globally
  E(0)  => :globally
  I(0)  => :globally
  A(0)  => :globally
  R(0)  => :globally
  beta  => :globally
  gamma => :globally
  k     => :globally
  n     => :globally
  rho   => :globally
