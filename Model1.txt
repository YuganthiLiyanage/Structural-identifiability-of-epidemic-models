
julia> using StructuralIdentifiability

julia> ode = @ODEmodel(
              S'(t) = - beta*S(t)*I(t)/n,
              E'(t) = (beta*S(t)*I(t)/n)- k*E(t),
              I'(t) =  k*E(t) - gamma*I(t),
              R'(t) = gamma*I(t),
              y1(t) = k*E(t)
              )
[ Info: Summary of the model:
[ Info: State variables: S, E, I, R
[ Info: Parameters: beta, gamma, k, n
[ Info: Inputs:
[ Info: Outputs: y1
S'(t) = (-S(t)*I(t)*beta)//n
E'(t) = (S(t)*I(t)*beta - E(t)*k*n)//n
I'(t) = E(t)*k - I(t)*gamma
R'(t) = I(t)*gamma
y1(t) = E(t)*k


julia>  assess_identifiability(ode)
  S(t)  => :globally
  E(t)  => :globally
  I(t)  => :globally
  R(t)  => :nonidentifiable
  beta  => :nonidentifiable
  gamma => :globally
  k     => :globally
  n     => :nonidentifiable

julia> find_identifiable_functions(ode)
 k
 gamma
 n//beta

julia> ioeqs = find_ioequations(ode)
Dict{Nemo.QQMPolyRingElem, Nemo.QQMPolyRingElem} with 1 entry:
  y1(t)_3 => 4*beta^2*k^3*y1(t)_0^6 + 12*beta^2*k^2*y1(t)_0^5*y1(t)_1 + 12*beta^2*k*y1(t)_0^4*y1(t)_1^2 + 4*beta^2*y1(t)_0^3*y1(t)_1^3 + beta*gamma^2*k^3*nâ€¦

julia> collect(values(ioeqs))
1-element Vector{Nemo.QQMPolyRingElem}:
 4*beta^2*k^3*y1(t)_0^6 + 12*beta^2*k^2*y1(t)_0^5*y1(t)_1 + 12*beta^2*k*y1(t)_0^4*y1(t)_1^2 + 4*beta^2*y1(t)_0^3*y1(t)_1^3 + beta*gamma^2*k^3*n*y1(t)_0^5 + 3*beta*gamma^2*k^2*n*y1(t)_0^4*y1(t)_1 + 3*beta*gamma^2*k*n*y1(t)_0^3*y1(t)_1^2 + beta*gamma^2*n*y1(t)_0^2*y1(t)_1^3 + 2*beta*gamma*k^3*n*y1(t)_0^4*y1(t)_1 + 6*beta*gamma*k^2*n*y1(t)_0^4*y1(t)_2 + 12*beta*gamma*k*n*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*beta*gamma*k*n*y1(t)_0^2*y1(t)_1^3 + 6*beta*gamma*n*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 4*beta*gamma*n*y1(t)_0*y1(t)_1^4 + 4*beta*k^3*n*y1(t)_0^4*y1(t)_2 - 4*beta*k^3*n*y1(t)_0^3*y1(t)_1^2 + 4*beta*k^2*n*y1(t)_0^4*y1(t)_3 + 2*beta*k^2*n*y1(t)_0^3*y1(t)_1*y1(t)_2 - 6*beta*k^2*n*y1(t)_0^2*y1(t)_1^3 + 8*beta*k*n*y1(t)_0^3*y1(t)_1*y1(t)_3 - 3*beta*k*n*y1(t)_0^3*y1(t)_2^2 - 2*beta*k*n*y1(t)_0^2*y1(t)_1^2*y1(t)_2 - 3*beta*k*n*y1(t)_0*y1(t)_1^4 + 4*beta*n*y1(t)_0^2*y1(t)_1^2*y1(t)_3 - 3*beta*n*y1(t)_0^2*y1(t)_1*y1(t)_2^2 - beta*n*y1(t)_1^5 + gamma^3*k^2*n^2*y1(t)_0^3*y1(t)_2 - gamma^3*k^2*n^2*y1(t)_0^2*y1(t)_1^2 + 2*gamma^3*k*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 2*gamma^3*k*n^2*y1(t)_0*y1(t)_1^3 + gamma^3*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - gamma^3*n^2*y1(t)_1^4 + gamma^2*k^3*n^2*y1(t)_0^3*y1(t)_2 - gamma^2*k^3*n^2*y1(t)_0^2*y1(t)_1^2 + gamma^2*k^2*n^2*y1(t)_0^3*y1(t)_3 + 2*gamma^2*k^2*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - 3*gamma^2*k^2*n^2*y1(t)_0*y1(t)_1^3 + 2*gamma^2*k*n^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + gamma^2*k*n^2*y1(t)_0^2*y1(t)_2^2 - gamma^2*k*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 - 2*gamma^2*k*n^2*y1(t)_1^4 + gamma^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_3 + gamma^2*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - 2*gamma^2*n^2*y1(t)_1^3*y1(t)_2 + gamma*k^3*n^2*y1(t)_0^2*y1(t)_1*y1(t)_2 - gamma*k^3*n^2*y1(t)_0*y1(t)_1^3 + gamma*k^2*n^2*y1(t)_0^2*y1(t)_1*y1(t)_3 + 2*gamma*k^2*n^2*y1(t)_0^2*y1(t)_2^2 - 3*gamma*k^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + 2*gamma*k*n^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - gamma*k*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 - gamma*k*n^2*y1(t)_1^3*y1(t)_2 + 2*gamma*n^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - gamma*n^2*y1(t)_0*y1(t)_2^3 - gamma*n^2*y1(t)_1^3*y1(t)_3 + k^3*n^2*y1(t)_0^2*y1(t)_2^2 - 2*k^3*n^2*y1(t)_0*y1(t)_1^2*y1(t)_2 + k^3*n^2*y1(t)_1^4 + 2*k^2*n^2*y1(t)_0^2*y1(t)_2*y1(t)_3 - 2*k^2*n^2*y1(t)_0*y1(t)_1^2*y1(t)_3 - 2*k^2*n^2*y1(t)_0*y1(t)_1*y1(t)_2^2 + 2*k^2*n^2*y1(t)_1^3*y1(t)_2 + k*n^2*y1(t)_0^2*y1(t)_3^2 - k*n^2*y1(t)_0*y1(t)_1*y1(t)_2*y1(t)_3 - k*n^2*y1(t)_0*y1(t)_2^3 - k*n^2*y1(t)_1^3*y1(t)_3 + 2*k*n^2*y1(t)_1^2*y1(t)_2^2 + n^2*y1(t)_0*y1(t)_1*y1(t)_3^2 - n^2*y1(t)_0*y1(t)_2^2*y1(t)_3 - n^2*y1(t)_1^2*y1(t)_2*y1(t)_3 + n^2*y1(t)_1*y1(t)_2^3

julia> assess_identifiability(ode, known_ic = [S,E,I,R])
  S(0)  => :globally
  E(0)  => :globally
  I(0)  => :globally
  R(0)  => :globally
  beta  => :nonidentifiable
  gamma => :globally
  k     => :globally
  n     => :nonidentifiable

julia> ode = @ODEmodel(
              x1'(t) = - beta*x1(t)*x3(t)/n,
              x2'(t) = beta*x1(t)*x3(t)/n- k*x2(t),
              x3'(t) =  k*x2(t) - gamma1*x3(t),
              x4'(t) = gamma1*x3(t),
              y1(t) = k*x2(t),
              y2(t) = n
              )
[ Info: Summary of the model:
[ Info: State variables: x1, x2, x3, x4
[ Info: Parameters: beta, gamma1, k, n
[ Info: Inputs:
[ Info: Outputs: y1, y2
x1'(t) = (-x1(t)*x3(t)*beta)//n
x2'(t) = (x1(t)*x3(t)*beta - x2(t)*k*n)//n
x3'(t) = x2(t)*k - x3(t)*gamma1
x4'(t) = x3(t)*gamma1
y1(t) = x2(t)*k
y2(t) = n


julia>  assess_identifiability(ode)
  x1(t)  => :globally
  x2(t)  => :globally
  x3(t)  => :globally
  x4(t)  => :nonidentifiable
  beta   => :globally
  gamma1 => :globally
  k      => :globally
  n      => :globally

julia> ode = @ODEmodel(
              S'(t) = - beta*S(t)*I(t)/n,
              E'(t) = (beta*S(t)*I(t)/n)- k*E(t),
              I'(t) =  k*E(t) - gamma*I(t),
              R'(t) = gamma*I(t),
              y1(t) = k*E(t),
              y2(t) = n
              )
[ Info: Summary of the model:
[ Info: State variables: S, E, I, R
[ Info: Parameters: beta, gamma, k, n
[ Info: Inputs:
[ Info: Outputs: y1, y2
S'(t) = (-S(t)*I(t)*beta)//n
E'(t) = (S(t)*I(t)*beta - E(t)*k*n)//n
I'(t) = E(t)*k - I(t)*gamma
R'(t) = I(t)*gamma
y1(t) = E(t)*k
y2(t) = n


julia>  assess_identifiability(ode)
[ Info: Assessing local identifiability
[ Info: Assessing global identifiability
[ Info: Note: the input model has nontrivial submodels. If the computation for the full model will be too heavy, you may want to try to first analyze one of the submodels. They can be produced using function `find_submodels`
[ Info: Functions to check involve states
[ Info: Computing IO-equations
[ Info: Computed IO-equations in 0.0945124 seconds
[ Info: Computing Wronskians
[ Info: Computed Wronskians in 0.0037588 seconds
[ Info: Dimensions of the Wronskians [2, 26]
[ Info: Ranks of the Wronskians computed in 9.62e-5 seconds
[ Info: Simplifying generating set. Simplification level: standard
[ Info: Computing normal forms of degree 2 in 4 variables
[ Info: Used 1 specializations in 0.0009735 seconds, found 4 relations
[ Info: Computing 5 Groebner bases for degrees (3, 3) for block orderings
[ Info: Computed Groebner bases in 0.0468333 seconds
[ Info: Inclusion checked with probability 0.9955 in 0.0009058 seconds
[ Info: Global identifiability assessed in 0.1629117 seconds
OrderedCollections.OrderedDict{Any, Symbol} with 8 entries:
  S(t)  => :globally
  E(t)  => :globally
  I(t)  => :globally
  R(t)  => :nonidentifiable
  beta  => :globally
  gamma => :globally
  k     => :globally
  n     => :globally
