julia> using StructuralIdentifiability

julia> ode = @ODEmodel(
              Sv'(t) = lambdaupsilon-((betaI*Sv(t)*I(t)+betaA*Sv(t)*A(t))/n)-muv*Sv(t),
              Iv'(t) = (betaI*Sv(t)*I(t)+betaA*Sv(t)*A(t))/n- muv*Iv(t),
              S'(t) =  -betav*Iv(t)*S(t)/n,
              I'(t) = rho*betav*Iv(t)/n*S(t)-gamma*I(t),
              A'(t) = (1-rho)*betav*Iv(t)*S(t)/n- gamma*A(t),
              R'(t) = gamma*I(t)+ gamma*A(t),
              y1(t) =  rho*5-rho*S(t)
              )
[ Info: Summary of the model:
[ Info: State variables: Sv, Iv, S, I, A, R
[ Info: Parameters: betaA, betaI, betav, gamma, lambdaupsilon, muv, n, rho
[ Info: Inputs:
[ Info: Outputs: y1
Sv'(t) = (-Sv(t)*I(t)*betaI - Sv(t)*A(t)*betaA - Sv(t)*muv*n + lambdaupsilon*n)//n
Iv'(t) = (Sv(t)*I(t)*betaI + Sv(t)*A(t)*betaA - Iv(t)*muv*n)//n
S'(t) = (-Iv(t)*S(t)*betav)//n
I'(t) = (Iv(t)*S(t)*betav*rho - I(t)*gamma*n)//n
A'(t) = (-Iv(t)*S(t)*betav*rho + Iv(t)*S(t)*betav - A(t)*gamma*n)//n
R'(t) = I(t)*gamma + A(t)*gamma
y1(t) = -S(t)*rho + 5*rho


julia>  assess_identifiability(ode)
  Sv(t)         => :nonidentifiable
  Iv(t)         => :nonidentifiable
  S(t)          => :globally
  I(t)          => :nonidentifiable
  A(t)          => :nonidentifiable
  R(t)          => :nonidentifiable
  betaA         => :nonidentifiable
  betaI         => :nonidentifiable
  betav         => :nonidentifiable
  gamma         => :globally
  lambdaupsilon => :nonidentifiable
  muv           => :globally
  n             => :nonidentifiable
  rho           => :globally

julia> find_identifiable_functions(ode)
 rho
 muv
 gamma
 n//(betav*lambdaupsilon)
 (n*rho)//(betaA*rho - betaA - betaI*rho)

julia> ode = @ODEmodel(
              Sv'(t) = lambdaupsilon-((betaI*Sv(t)*I(t)+betaA*Sv(t)*A(t))/n)-muv*Sv(t),
              Iv'(t) = (betaI*Sv(t)*I(t)+betaA*Sv(t)*A(t))/n- muv*Iv(t),
              S'(t) =  -betav*Iv(t)*S(t)/n,
              I'(t) = rho*betav*Iv(t)/n*S(t)-gamma*I(t),
              A'(t) = (1-rho)*betav*Iv(t)*S(t)/n- gamma*A(t),
              R'(t) = gamma*I(t)+ gamma*A(t),
              y1(t) =  rho*5-rho*S(t),
              y2(t) = n
              )
[ Info: Summary of the model:
[ Info: State variables: Sv, Iv, S, I, A, R
[ Info: Parameters: betaA, betaI, betav, gamma, lambdaupsilon, muv, n, rho
[ Info: Inputs:
[ Info: Outputs: y1, y2
Sv'(t) = (-Sv(t)*I(t)*betaI - Sv(t)*A(t)*betaA - Sv(t)*muv*n + lambdaupsilon*n)//n
Iv'(t) = (Sv(t)*I(t)*betaI + Sv(t)*A(t)*betaA - Iv(t)*muv*n)//n
S'(t) = (-Iv(t)*S(t)*betav)//n
I'(t) = (Iv(t)*S(t)*betav*rho - I(t)*gamma*n)//n
A'(t) = (-Iv(t)*S(t)*betav*rho + Iv(t)*S(t)*betav - A(t)*gamma*n)//n
R'(t) = I(t)*gamma + A(t)*gamma
y1(t) = -S(t)*rho + 5*rho
y2(t) = n


julia> assess_identifiability(ode, known_ic = [Sv,Iv,S,I,A,R])
  Sv(0)         => :globally
  Iv(0)         => :globally
  S(0)          => :globally
  I(0)          => :globally
  A(0)          => :globally
  R(0)          => :globally
  betaA         => :globally
  betaI         => :globally
  betav         => :globally
  gamma         => :globally
  lambdaupsilon => :globally
  muv           => :globally
  n             => :globally
  rho           => :globally

julia>